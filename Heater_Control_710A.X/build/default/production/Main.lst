CCS PCD C Compiler, Version 5.074, 35380               22-Feb-18 16:09

               Filename:   C:\GitRepo\dsPIC33GP710A_Heater_Control\Heater_Control_710A.X\build\default\production\Main.lst

               ROM used:   2204 bytes (1%)
                           Largest free fragment is 65536
               RAM used:   196 (1%) at main() level
                           334 (1%) worst case
               Stack used: 66 locations (14 in main + 52 for interrupts)
               Stack size: 128

*
00000:  GOTO    70E
*
0001A:  DATA    E2,05,00
*
00056:  DATA    2C,02,00
.................... /********************************************************************** 
.................... * Temperature Control  
.................... * © PerkinElmer Health Sciences Canada, Inc., 2017 
.................... * This program is for Heater control U26 on old Board.  
.................... * FileName:        Main.c 
.................... * Processor:       dsPIC33FJ256GP510A 
.................... * Compiler:        CCS v5.074 or Higher 
.................... * Version:      
.................... ************************************************************************/ 
....................  
.................... #include <33FJ256GP710A.h> 
.................... //////////// Standard Header file for the DSPIC33FJ256GP710A device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  #device DSPIC33FJ256GP710A 
*
0033A:  MOV     W5,[W15++]
0033C:  MOV     W6,[W15++]
0033E:  MOV     #8E,W1
00340:  CP0     W0
00342:  BRA     Z,368
00344:  BTSC    W0.F
00346:  BRA     350
00348:  BCLR.B  42.0
0034A:  RLC     W0,W0
0034C:  DEC     W1,W1
0034E:  BRA     344
00350:  SWAP    W1
00352:  BCLR.B  42.0
00354:  RRC     W1,W1
00356:  BCLR    W0.F
00358:  SWAP    W0
0035A:  XOR.B   W0L,W1L,W1L
0035C:  AND.B   #0,W0L
0035E:  BRA     36E
00360:  MOV.B   W1L,W0L
00362:  BSET    W1.7
00364:  AND.B   #0,W1L
00366:  BRA     36E
00368:  CLR     W0
0036A:  CLR     W1
0036C:  BRA     36E
0036E:  MOV     [--W15],W6
00370:  MOV     [--W15],W5
00372:  RETURN  
00374:  MOV     W5,[W15++]
00376:  MOV     #C,W5
00378:  REPEAT  #4
0037A:  MOV     [W5++],[W15++]
0037C:  MOV     W0,W4
0037E:  MOV     W1,W5
00380:  MOV     W3,W7
00382:  MOV     W2,W6
00384:  BCLR.B  42.0
00386:  BCLR.B  42.1
00388:  RLC     W1,W1
0038A:  SWAP    W1
0038C:  AND     #FF,W1
0038E:  CP0     W1
00390:  BRA     Z,428
00392:  BCLR.B  42.0
00394:  BCLR.B  42.1
00396:  RLC     W3,W3
00398:  SWAP    W3
0039A:  AND     #FF,W3
0039C:  CP0     W3
0039E:  BRA     Z,428
003A0:  ZE      W0,W0
003A2:  ADD.B   W3L,W1L,W0L
003A4:  BRA     C,3AE
003A6:  SUB     #7F,W0
003A8:  BRA     Z,428
003AA:  BRA     NC,428
003AC:  BRA     3B2
003AE:  ADD.B   #81,W0L
003B0:  BRA     C,428
003B2:  XOR     W5,W7,W10
003B4:  BCLR.B  42.0
003B6:  BCLR.B  42.1
003B8:  AND     #FF,W5
003BA:  BSET    W5.7
003BC:  BCLR.B  42.0
003BE:  AND     #FF,W7
003C0:  BSET    W7.7
003C2:  MUL.UU  W4,W6,W2
003C4:  MUL.UU  W5,W6,W8
003C6:  ADDC    W8,W3,W3
003C8:  MOV     W9,W1
003CA:  BTSC.B  42.0
003CC:  INC     W1,W1
003CE:  BCLR.B  42.0
003D0:  MUL.UU  W7,W4,W8
003D2:  ADDC    W8,W3,W3
003D4:  ADDC    W9,W1,W1
003D6:  MUL.UU  W5,W7,W8
003D8:  ADDC    W8,W1,W1
003DA:  INC     W0,W0
003DC:  CP0     W1
003DE:  BTSC.B  42.1
003E0:  BRA     3E4
003E2:  BRA     3EA
003E4:  CP0     W3
003E6:  BTSC.B  42.1
003E8:  BRA     3F4
003EA:  BTSC    W1.F
003EC:  BRA     3F4
003EE:  RLC     W3,W3
003F0:  RLC     W1,W1
003F2:  DEC     W0,W0
003F4:  MOV     W1,W2
003F6:  BCLR.B  42.0
003F8:  BTSS    W3.7
003FA:  BRA     40E
003FC:  MOV     #FF00,W7
003FE:  AND     W3,W7,W3
00400:  ADD     #100,W3
00402:  ADDC    W2,#0,W2
00404:  CP0     W2
00406:  BRA     NZ,40E
00408:  CP0     W3
0040A:  BRA     NZ,40E
0040C:  INC     W0,W0
0040E:  SWAP    W0
00410:  BCLR.B  42.0
00412:  BCLR.B  42.1
00414:  RRC     W0,W1
00416:  BTSC    W10.F
00418:  BSET    W1.F
0041A:  BCLR    W2.F
0041C:  SWAP    W2
0041E:  XOR.B   W2L,W1L,W1L
00420:  SWAP    W3
00422:  MOV.B   W3L,W2L
00424:  MOV     W2,W0
00426:  BRA     42E
00428:  MOV     #0,W0
0042A:  MOV     #0,W1
0042C:  BRA     42E
0042E:  MOV     #14,W5
00430:  REPEAT  #4
00432:  MOV     [--W15],[W5--]
00434:  MOV     [--W15],W5
00436:  RETURN  
00438:  MOV     W5,[W15++]
0043A:  MOV     #C,W5
0043C:  REPEAT  #3
0043E:  MOV     [W5++],[W15++]
00440:  CLR     W9
00442:  MOV     #8000,W8
00444:  BTSC.B  43.0
00446:  XOR     W8,W3,W3
00448:  CP0     W0
0044A:  BRA     NZ,452
0044C:  MOV     #7FFF,W10
0044E:  AND     W1,W10,W10
00450:  BTSS.B  42.1
00452:  MOV     W1,W10
00454:  XOR     W3,W10,W11
00456:  MOV     W1,W6
00458:  MOV     W3,W7
0045A:  MOV     W3,W12
0045C:  BCLR.B  42.1
0045E:  BCLR.B  42.0
00460:  RLC     W6,W6
00462:  SWAP    W6
00464:  AND     #FF,W6
00466:  CP0     W6
00468:  BRA     Z,5AC
0046A:  BCLR.B  42.1
0046C:  BCLR.B  42.0
0046E:  RLC     W7,W7
00470:  SWAP    W7
00472:  AND     #FF,W7
00474:  CP0     W7
00476:  BRA     Z,5B6
00478:  BCLR.B  42.1
0047A:  BCLR.B  42.0
0047C:  CP      W7,W6
0047E:  BRA     Z,5B8
00480:  BRA     N,5C8
00482:  BCLR    W9.0
00484:  BSET    W9.1
00486:  SUB     W7,W6,W8
00488:  MOV     W7,W6
0048A:  AND     #FF,W1
0048C:  BSET    W1.7
0048E:  AND     #FF,W3
00490:  BSET    W3.7
00492:  MOV     #28,W7
00494:  CP      W7,W8
00496:  BRA     N,4BA
00498:  BCLR.B  42.1
0049A:  BCLR.B  42.0
0049C:  RRC     W1,W1
0049E:  RRC     W0,W0
004A0:  DEC     W8,W8
004A2:  BRA     NZ,498
004A4:  BRA     4C0
004A6:  MOV     #28,W7
004A8:  CP      W7,W8
004AA:  BRA     N,4BE
004AC:  BCLR.B  42.1
004AE:  BCLR.B  42.0
004B0:  RRC     W3,W3
004B2:  RRC     W2,W2
004B4:  DEC     W8,W8
004B6:  BRA     NZ,4AC
004B8:  BRA     4D8
004BA:  MOV     W2,W0
004BC:  MOV     W3,W1
004BE:  BRA     546
004C0:  BTSS    W11.F
004C2:  BRA     4E6
004C4:  BTSC    W9.4
004C6:  MOV     W12,W11
004C8:  NEG     W0,W0
004CA:  BRA     Z,4D0
004CC:  COM.B   W1L,W1L
004CE:  BRA     4D2
004D0:  NEG     W1,W1
004D2:  BTSC    W9.4
004D4:  BRA     52C
004D6:  BRA     4E6
004D8:  BTSS    W11.F
004DA:  BRA     4E6
004DC:  NEG     W2,W2
004DE:  BRA     Z,4E4
004E0:  COM.B   W3L,W3L
004E2:  BRA     4E6
004E4:  NEG     W3,W3
004E6:  AND     #FF,W5
004E8:  BCLR.B  42.1
004EA:  BCLR.B  42.0
004EC:  ADD     W0,W2,W0
004EE:  ADDC.B  W1L,W3L,W1L
004F0:  BTSC.B  42.0
004F2:  BSET    W9.3
004F4:  BTSC    W9.0
004F6:  BRA     50A
004F8:  BTSC    W9.1
004FA:  BRA     4FE
004FC:  BRA     514
004FE:  BTSC    W11.F
00500:  BRA     52C
00502:  BTSC    W9.3
00504:  BRA     558
00506:  BSET    W9.6
00508:  BRA     546
0050A:  BTSC    W11.F
0050C:  BRA     52C
0050E:  BTSC    W9.3
00510:  BRA     558
00512:  BRA     546
00514:  BCLR    W9.2
00516:  BTSC    W11.F
00518:  BRA     522
0051A:  MOV     W10,W11
0051C:  BTSC    W9.3
0051E:  BRA     558
00520:  BRA     58E
00522:  BSET    W9.4
00524:  XOR.B   #80,W1L
00526:  BTSC    W1.7
00528:  BRA     4C4
0052A:  MOV     W10,W11
0052C:  AND     #FF,W1
0052E:  IOR      W0,  W1,W7
00530:  BRA     Z,546
00532:  BTSC    W1.7
00534:  BRA     546
00536:  BCLR.B  42.1
00538:  BCLR.B  42.0
0053A:  RLC     W0,W0
0053C:  RLC     W1,W1
0053E:  DEC     W6,W6
00540:  BTSC.B  42.1
00542:  BRA     5A6
00544:  BRA     532
00546:  BTSC    W9.0
00548:  MOV     W10,W11
0054A:  BTSC    W9.1
0054C:  MOV     W12,W11
0054E:  BTSS    W9.5
00550:  BRA     586
00552:  BTSC    W10.F
00554:  BSET    W0.8
00556:  BRA     58E
00558:  BSET.B  42.0
0055A:  RRC.B   W1L,W1L
0055C:  RRC     W0,W0
0055E:  BTSC.B  42.0
00560:  BSET    W9.5
00562:  INC     W6,W6
00564:  BRA     Z,5A6
00566:  BTSS    W9.5
00568:  BRA     57A
0056A:  INC     W0,W0
0056C:  BRA     NZ,57A
0056E:  INC.B   W1L,W1L
00570:  BRA     NZ,57A
00572:  RRC.B   W1L,W1L
00574:  RRC     W0,W0
00576:  INC     W6,W6
00578:  BRA     Z,5A6
0057A:  BTSC    W9.0
0057C:  MOV     W10,W11
0057E:  BTSC    W9.1
00580:  MOV     W12,W11
00582:  BTSC.B  42.1
00584:  BRA     5A6
00586:  BTSC    W9.6
00588:  MOV     W10,W11
0058A:  BTSC    W9.7
0058C:  MOV     W12,W11
0058E:  IOR      W0,  W1,W2
00590:  BRA     Z,5D8
00592:  BCLR    W1.7
00594:  SWAP    W6
00596:  BCLR.B  42.1
00598:  BCLR.B  42.0
0059A:  RRC     W6,W6
0059C:  XOR     W6,W1,W1
0059E:  BSET    W1.F
005A0:  BTSS    W11.F
005A2:  BCLR    W1.F
005A4:  BRA     5D8
005A6:  MOV     #0,W0
005A8:  MOV     #0,W1
005AA:  BRA     5D8
005AC:  BTSC    W10.F
005AE:  XOR     W8,W3,W3
005B0:  MOV     W2,W0
005B2:  MOV     W3,W1
005B4:  BRA     5D8
005B6:  BRA     5D8
005B8:  AND     #FF,W3
005BA:  BSET    W3.7
005BC:  AND     #FF,W1
005BE:  BSET    W1.7
005C0:  BTSC    W11.F
005C2:  BCLR    W3.7
005C4:  BSET    W9.2
005C6:  BRA     4D8
005C8:  SUB     W6,W7,W8
005CA:  AND     #FF,W1
005CC:  BSET    W1.7
005CE:  AND     #FF,W3
005D0:  BSET    W3.7
005D2:  BCLR    W9.1
005D4:  BSET    W9.0
005D6:  BRA     4A6
005D8:  MOV     #12,W5
005DA:  REPEAT  #3
005DC:  MOV     [--W15],[W5--]
005DE:  MOV     [--W15],W5
005E0:  RETURN  
*
00630:  MOV     W5,[W15++]
00632:  MOV     W6,[W15++]
00634:  MOV     #8E,W1
00636:  BCLR    W6.0
00638:  BTSS    W0.F
0063A:  BRA     642
0063C:  BSET    W6.0
0063E:  NEG     W0,W0
00640:  BRA     642
00642:  CP0     W0
00644:  BRA     Z,66E
00646:  BTSC    W0.F
00648:  BRA     652
0064A:  BCLR.B  42.0
0064C:  RLC     W0,W0
0064E:  DEC     W1,W1
00650:  BRA     646
00652:  SWAP    W1
00654:  BCLR.B  42.0
00656:  RRC     W1,W1
00658:  BCLR    W0.F
0065A:  SWAP    W0
0065C:  XOR.B   W0L,W1L,W1L
0065E:  AND.B   #0,W0L
00660:  BTSC    W6.0
00662:  BSET    W1.F
00664:  BRA     674
00666:  MOV.B   W1L,W0L
00668:  BSET    W1.7
0066A:  AND.B   #0,W1L
0066C:  BRA     674
0066E:  CLR     W0
00670:  CLR     W1
00672:  BRA     674
00674:  MOV     [--W15],W6
00676:  MOV     [--W15],W5
00678:  RETURN  
0067A:  MOV     W0,W2
0067C:  MOV     W1,W3
0067E:  MOV.B   W1L,W0L
00680:  SWAP    W0
00682:  BSET    W0.F
00684:  RLC     W1,W1
00686:  SWAP    W1
00688:  ZE      W1,W1
0068A:  MOV     #8E,W4
0068C:  SUB.B   W4L,W1L,W1L
0068E:  BRA     Z,69C
00690:  CP0     W0
00692:  BRA     Z,69C
00694:  BCLR.B  42.0
00696:  RRC     W0,W0
00698:  DEC     W1,W1
0069A:  BRA     NZ,690
0069C:  BTSS    W3.F
0069E:  BRA     6A4
006A0:  NEG     W0,W0
006A2:  BRA     6A4
006A4:  RETURN  
006A6:  MOV     W5,[W15++]
006A8:  MOV     W6,[W15++]
006AA:  MOV     W7,[W15++]
006AC:  XOR     W1,W3,W4
006AE:  BTSS    W4.F
006B0:  BRA     6BE
006B2:  BCLR.B  42.0
006B4:  BCLR.B  42.1
006B6:  BTSS    W1.F
006B8:  BRA     706
006BA:  BSET.B  42.0
006BC:  BRA     706
006BE:  MOV     W1,W4
006C0:  MOV     W0,W5
006C2:  MOV     W3,W6
006C4:  MOV     W2,W7
006C6:  RLC     W1,W1
006C8:  SWAP    W1
006CA:  RLC     W3,W3
006CC:  SWAP    W3
006CE:  SUB.B   W3L,W1L,W1L
006D0:  BRA     Z,6DC
006D2:  BTSS    W4.F
006D4:  BRA     706
006D6:  MOV     #1,W0
006D8:  XOR.B   42
006DA:  BRA     706
006DC:  MOV.B   W4L,W1L
006DE:  MOV.B   W6L,W3L
006E0:  BCLR    W1.7
006E2:  BCLR    W3.7
006E4:  SUB.B   W3L,W1L,W1L
006E6:  BRA     Z,6F2
006E8:  BTSS    W4.F
006EA:  BRA     706
006EC:  MOV     #1,W0
006EE:  XOR.B   42
006F0:  BRA     706
006F2:  SUB     W7,W5,W1
006F4:  BRA     Z,700
006F6:  BTSS    W4.F
006F8:  BRA     706
006FA:  MOV     #1,W0
006FC:  XOR.B   42
006FE:  BRA     706
00700:  BCLR.B  42.0
00702:  BRA     706
00704:  BRA     706
00706:  MOV     [--W15],W7
00708:  MOV     [--W15],W6
0070A:  MOV     [--W15],W5
0070C:  RETURN  
....................  
.................... #list 
....................  
.................... #fuses XT,NOWDT,NOPROTECT 
.................... #device ADC = 12  
.................... #use delay(clock = 100 MHz, crystal = 40MHz) 
.................... #use spi(SLAVE, SPI2, BITS = 8, MODE = 1, ENABLE = PIN_G9, stream = SPI_2) 
*
00200:  MOV     W5,[W15++]
00202:  MOV     #8,W3
00204:  CP      W2,#8
00206:  BRA     Z,216
00208:  MOV     #9,W3
0020A:  CP      W2,#10
0020C:  BRA     Z,216
0020E:  MOV     #A,W3
00210:  CP      W2,#18
00212:  BRA     Z,216
00214:  MOV     #B,W3
00216:  BTSS.B  260.0
00218:  BRA     216
0021A:  MOV.B   268,W0L
0021C:  MOV.B   W0L,[W3--]
0021E:  BCLR.B  260.6
00220:  SUB.B   #8,W2L
00222:  BRA     GTU,216
00224:  MOV     W4,W0
00226:  MOV     W5,W1
00228:  MOV     [--W15],W5
0022A:  RETURN  
....................  
....................  
.................... /******************************************************************************/ 
.................... // ADC Parameters 
.................... // Alpha = 0.1611328125 = 660/4096 ; 660 is maximum temperature value; 5mV/ 1C change 
.................... float Alpha = 0.1611328125; 
.................... /******************************************************************************/ 
.................... // PID Parameters// 
.................... float C_out = 0, Set_Point, M_Variable = 0, Error = 0,  Previous_Error; 
.................... float dt = 0.1,  Kp = 5, Ki = 0.1, Kd = 0.1, Integral = 0, Derivative = 0; 
.................... /******************************************************************************/ 
....................  
.................... int8 SPI_Flag = 0, Byte_Count = 0, Rx, Tx, Cmand, ProbeID = 1,count = 0; 
.................... int8 Version = 5,SP = 0, SP_H = 0; 
.................... unsigned int Value, Duty, Err_cnt = 0; 
.................... unsigned char MV , MVH; 
....................  
.................... /******************************************************************************/ 
.................... // 8 bits SPI 
.................... #INT_SPI2 
....................  
.................... void spi2_slave_isr(void) 
0022C:  PUSH    42
0022E:  PUSH    36
00230:  PUSH    32
00232:  MOV     W0,[W15++]
00234:  MOV     #2,W0
00236:  REPEAT  #C
00238:  MOV     [W0++],[W15++]
.................... { 
....................   Rx = spi_xfer_in(SPI_2, 8); 
0023A:  MOV     #8,W2
0023C:  CALL    200
00240:  MOV.B   W0L,833
....................   Byte_Count++;  
00242:  INC.B   0832
....................   
....................   switch(Byte_Count) 
00244:  MOV.B   832,W0L
00246:  SE      W0,W0
00248:  XOR     #1,W0
0024A:  BRA     Z,25A
0024C:  XOR     #3,W0
0024E:  BRA     Z,292
00250:  XOR     #1,W0
00252:  BRA     Z,2C6
00254:  XOR     #7,W0
00256:  BRA     Z,2F8
00258:  BRA     322
....................             { 
....................             case 1: 
....................                 spi_prewrite(Version); 
0025A:  MOV.B   838,W0L
0025C:  MOV.B   W0L,800
0025E:  MOV.B   800,W0L
00260:  MOV.B   W0L,268
00262:  MOV.B   #1,W0L
00264:  MOV.B   W0L,800
....................                 if(Cmand == 1) 
00266:  MOV.B   835,W0L
00268:  SE      W0,W0
0026A:  CP      W0,#1
0026C:  BRA     NZ,27C
....................                     spi_prewrite(0); 
0026E:  CLR.B   800
00270:  MOV.B   800,W0L
00272:  MOV.B   W0L,268
00274:  MOV.B   #1,W0L
00276:  MOV.B   W0L,800
00278:  GOTO    28E
....................                 else if(Cmand == 2) 
0027C:  MOV.B   835,W0L
0027E:  SE      W0,W0
00280:  CP      W0,#2
00282:  BRA     NZ,28E
....................                     spi_prewrite(0); 
00284:  CLR.B   800
00286:  MOV.B   800,W0L
00288:  MOV.B   W0L,268
0028A:  MOV.B   #1,W0L
0028C:  MOV.B   W0L,800
....................                 break; 
0028E:  GOTO    328
....................        
....................             case 2:  
....................                 Cmand = Rx; 
00292:  MOV.B   833,W0L
00294:  MOV.B   W0L,835
....................                 if(Cmand == 1) 
00296:  MOV.B   835,W0L
00298:  SE      W0,W0
0029A:  CP      W0,#1
0029C:  BRA     NZ,2AE
....................                     spi_prewrite(MV); 
0029E:  MOV.B   83B,W0L
002A0:  MOV.B   W0L,800
002A2:  MOV.B   800,W0L
002A4:  MOV.B   W0L,268
002A6:  MOV.B   #1,W0L
002A8:  MOV.B   W0L,800
002AA:  GOTO    2C2
....................                 else if(Cmand == 3) 
002AE:  MOV.B   835,W0L
002B0:  SE      W0,W0
002B2:  CP      W0,#3
002B4:  BRA     NZ,2C2
....................                         spi_prewrite(ProbeID); 
002B6:  MOV.B   836,W0L
002B8:  MOV.B   W0L,800
002BA:  MOV.B   800,W0L
002BC:  MOV.B   W0L,268
002BE:  MOV.B   #1,W0L
002C0:  MOV.B   W0L,800
....................                 break; 
002C2:  GOTO    328
....................              
....................             case 3:  
....................                   
....................                 if(Cmand == 1) 
002C6:  MOV.B   835,W0L
002C8:  SE      W0,W0
002CA:  CP      W0,#1
002CC:  BRA     NZ,2E2
....................                 {SP_H = Rx; 
002CE:  MOV.B   833,W0L
002D0:  MOV.B   W0L,83A
....................                     spi_prewrite(MVH);} 
002D2:  MOV.B   842,W0L
002D4:  MOV.B   W0L,800
002D6:  MOV.B   800,W0L
002D8:  MOV.B   W0L,268
002DA:  MOV.B   #1,W0L
002DC:  MOV.B   W0L,800
002DE:  GOTO    2F4
....................                 else if(Cmand == 3) 
002E2:  MOV.B   835,W0L
002E4:  SE      W0,W0
002E6:  CP      W0,#3
002E8:  BRA     NZ,2F4
....................                    spi_prewrite(0); 
002EA:  CLR.B   800
002EC:  MOV.B   800,W0L
002EE:  MOV.B   W0L,268
002F0:  MOV.B   #1,W0L
002F2:  MOV.B   W0L,800
....................                 break;       
002F4:  GOTO    328
....................              
....................              
....................             case 4:  
....................                 Byte_Count = 0;             
002F8:  CLR.B   832
....................                 if(Cmand == 1) 
002FA:  MOV.B   835,W0L
002FC:  SE      W0,W0
002FE:  CP      W0,#1
00300:  BRA     NZ,30A
....................                     SP = Rx; 
00302:  MOV.B   833,W0L
00304:  MOV.B   W0L,839
00306:  GOTO    31E
....................                 else if(Cmand == 3) 
0030A:  MOV.B   835,W0L
0030C:  SE      W0,W0
0030E:  CP      W0,#3
00310:  BRA     NZ,31E
....................                     spi_prewrite(50); 
00312:  MOV.B   #32,W0L
00314:  MOV.B   W0L,800
00316:  MOV.B   800,W0L
00318:  MOV.B   W0L,268
0031A:  MOV.B   #1,W0L
0031C:  MOV.B   W0L,800
....................                 break; 
0031E:  GOTO    328
....................                  
....................             default: 
....................                 Byte_Count = 0; 
00322:  CLR.B   832
....................                 break; 
00324:  GOTO    328
....................             } 
....................  
.................... } 
....................  
00328:  BCLR.B  88.1
0032A:  MOV     #1A,W0
0032C:  REPEAT  #C
0032E:  MOV     [--W15],[W0--]
00330:  MOV     [--W15],W0
00332:  POP     32
00334:  POP     36
00336:  POP     42
00338:  RETFIE  
.................... #INT_TIMER1 fast 
.................... void  timer1_isr(void)  
*
005E2:  PUSH.S  
.................... { 
....................     M_Variable= ((float)read_adc() * Alpha) + 12; 
005E4:  BCLR.B  320.0
005E6:  BSET.B  320.1
005E8:  BTSS.B  320.0
005EA:  BRA     5E8
005EC:  MOV     300,W0
005EE:  CALL    33A
005F2:  MOV     W0,W5
005F4:  MOV     W1,W6
005F6:  MOV     W5,W0
005F8:  MOV     W6,W1
005FA:  MOV     802,W2
005FC:  MOV     804,W3
005FE:  CALL    374
00602:  MOV     W0,W5
00604:  MOV     W1,W6
00606:  BCLR.B  43.0
00608:  MOV     W5,W0
0060A:  MOV     W6,W1
0060C:  MOV     #0,W2
0060E:  MOV     #4140,W3
00610:  CALL    438
00614:  MOV     W0,80E
00616:  MOV     W1,810
....................     Error = Set_Point - M_Variable; 
00618:  BSET.B  43.0
0061A:  MOV     80A,W0
0061C:  MOV     80C,W1
0061E:  MOV     80E,W2
00620:  MOV     810,W3
00622:  CALL    438
00626:  MOV     W0,812
00628:  MOV     W1,814
0062A:  BCLR.B  84.3
0062C:  POP.S   
0062E:  RETFIE  
.................... } 
....................  
.................... void main() 
*
0070E:  MOV     #7780,W15
00710:  MOV     #77FF,W0
00712:  MOV     W0,20
00714:  NOP     
00716:  MOV     #4444,W0
00718:  MOV     W0,A4
0071A:  BSET.B  81.7
0071C:  MOV     #17,W4
0071E:  MOV     W4,746
00720:  MOV     #3,W4
00722:  MOV     W4,744
00724:  DISI    #E
00726:  MOV     #103,W0
00728:  MOV     #743,W1
0072A:  MOV     #78,W2
0072C:  MOV     #9A,W3
0072E:  MOV.B   W2L,[W1]
00730:  MOV.B   W3L,[W1]
00732:  MOV.B   W0L,743
00734:  LSR     W0,#8,W0
00736:  MOV     #742,W1
00738:  MOV     #46,W2
0073A:  MOV     #57,W3
0073C:  MOV.B   W2L,[W1]
0073E:  MOV.B   W3L,[W1]
00740:  MOV.B   W0L,[W1]
00742:  CLR.B   800
00744:  BCLR.B  261.7
00746:  BCLR.B  2E5.0
00748:  BSET.B  2E4.7
0074A:  BSET.B  2E5.1
0074C:  BSET.B  2E4.6
0074E:  BCLR.B  260.6
00750:  BCLR.B  263.1
00752:  CLR     268
00754:  MOV     #1097,W4
00756:  MOV     W4,262
00758:  BSET.B  261.7
0075A:  BCLR.B  2E5.1
0075C:  BSET.B  2E9.1
0075E:  CLR     802
00760:  MOV     #3E25,W4
00762:  MOV     W4,804
00764:  CLR     806
00766:  CLR     808
00768:  CLR     80E
0076A:  CLR     810
0076C:  CLR     812
0076E:  CLR     814
00770:  MOV     #CCCD,W4
00772:  MOV     W4,81A
00774:  MOV     #3DCC,W4
00776:  MOV     W4,81C
00778:  CLR     81E
0077A:  MOV     #40A0,W4
0077C:  MOV     W4,820
0077E:  MOV     #CCCD,W4
00780:  MOV     W4,822
00782:  MOV     #3DCC,W4
00784:  MOV     W4,824
00786:  MOV     #CCCD,W4
00788:  MOV     W4,826
0078A:  MOV     #3DCC,W4
0078C:  MOV     W4,828
0078E:  CLR     82A
00790:  CLR     82C
00792:  CLR     82E
00794:  CLR     830
00796:  CLR.B   801
00798:  CLR.B   832
0079A:  MOV.B   #1,W0L
0079C:  MOV.B   W0L,836
0079E:  CLR.B   837
007A0:  MOV.B   #5,W0L
007A2:  MOV.B   W0L,838
007A4:  CLR.B   839
007A6:  CLR.B   83A
007A8:  CLR     840
007AA:  SETM    32C
007AC:  SETM    32A
007AE:  SETM    36C
007B0:  SETM    36A
.................... {     
....................    output_float(PIN_G9); // SS as an input 
007B2:  BSET.B  2E5.1
....................    setup_adc_ports(sAN0, VSS_VDD); 
007B4:  MOV     #FFFE,W4
007B6:  MOV     W4,32C
007B8:  SETM    32A
007BA:  CLR     322
....................    setup_adc(ADC_CLOCK_INTERNAL); 
007BC:  MOV     #9F00,W4
007BE:  MOV     W4,324
007C0:  MOV     #84E0,W4
007C2:  MOV     W4,320
....................    set_adc_channel(0); 
007C4:  CLR     328
....................     
....................    // Timer 1 for 10 ms INT when clock is 100MHz 
....................    setup_timer1(TMR_INTERNAL | TMR_DIV_BY_64, 7812); 
007C6:  CLR     104
007C8:  MOV     #1E84,W4
007CA:  MOV     W4,102
007CC:  MOV     #8020,W4
007CE:  MOV     W4,104
....................     
....................    setup_timer2(TMR_INTERNAL | TMR_DIV_BY_64, 500); 
007D0:  CLR     110
007D2:  MOV     #1F4,W4
007D4:  MOV     W4,10C
007D6:  MOV     #8020,W4
007D8:  MOV     W4,110
....................    setup_compare(2, COMPARE_PWM | COMPARE_TIMER2); 
007DA:  MOV     #6,W4
007DC:  MOV     W4,18A
....................    set_pwm_duty(2,0); 
007DE:  CLR     186
....................     
....................    enable_interrupts(INT_TIMER1); 
007E0:  BSET.B  94.3
....................    enable_interrupts(INT_SPI2); 
007E2:  BSET.B  98.1
....................    enable_interrupts(INTR_GLOBAL); 
007E4:  BCLR.B  81.7
007E6:  CLR     42
007E8:  BSET.B  81.7
....................    
....................    while(1) 
....................     { 
....................         
....................       if(SP_H) 
007EA:  CP0.B   83A
007EC:  BRA     Z,81E
....................          Set_Point =  (float)SP + 256; 
007EE:  MOV.B   839,W0L
007F0:  SE      W0,W0
007F2:  CALL    630
007F6:  MOV     W0,W5
007F8:  MOV     W1,W6
007FA:  BCLR.B  43.0
007FC:  PUSH    42
007FE:  BCLR.B  81.7
00800:  SETM.B  42
00802:  BSET.B  81.7
00804:  MOV     W5,W0
00806:  MOV     W6,W1
00808:  MOV     #0,W2
0080A:  MOV     #4380,W3
0080C:  CALL    438
00810:  BCLR.B  81.7
00812:  POP     42
00814:  BSET.B  81.7
00816:  MOV     W0,80A
00818:  MOV     W1,80C
0081A:  GOTO    82A
....................       else 
....................          Set_Point = (float)SP; 
0081E:  MOV.B   839,W0L
00820:  SE      W0,W0
00822:  CALL    630
00826:  MOV     W0,80A
00828:  MOV     W1,80C
....................        
....................       Value = (unsigned int16)M_Variable; 
0082A:  MOV     80E,W0
0082C:  MOV     810,W1
0082E:  CALL    67A
00832:  MOV     W0,83C
....................       MV  = (unsigned char)Value; 
00834:  MOV.B   83C,W0L
00836:  MOV.B   W0L,83B
....................       MVH = Value >> 8;        
00838:  MOV.B   83D,W0L
0083A:  MOV.B   W0L,842
0083C:  PUSH    42
0083E:  BCLR.B  81.7
00840:  SETM.B  42
00842:  BSET.B  81.7
....................        
....................       C_out = (Kp * Error); 
00844:  MOV     81E,W0
00846:  MOV     820,W1
00848:  MOV     812,W2
0084A:  MOV     814,W3
0084C:  CALL    374
00850:  BCLR.B  81.7
00852:  POP     42
00854:  BSET.B  81.7
00856:  MOV     W0,806
00858:  MOV     W1,808
....................       if(C_out > 500) 
0085A:  MOV     #0,W0
0085C:  MOV     #43FA,W1
0085E:  MOV     806,W2
00860:  MOV     808,W3
00862:  CALL    6A6
00866:  BRA     NC,872
....................           C_out = 500; 
00868:  CLR     806
0086A:  MOV     #43FA,W4
0086C:  MOV     W4,808
0086E:  GOTO    896
....................       else if(C_out < 0) 
00872:  MOV     806,W0
00874:  MOV     808,W1
00876:  MOV     #0,W2
00878:  MOV     #0,W3
0087A:  CALL    6A6
0087E:  BRA     NC,888
....................           C_out = 0; 
00880:  CLR     806
00882:  CLR     808
00884:  GOTO    896
....................       else 
....................       {  
....................         Duty = (unsigned int)C_out; 
00888:  MOV     806,W0
0088A:  MOV     808,W1
0088C:  CALL    67A
00890:  MOV     W0,83E
....................         set_pwm_duty(2,Duty); 
00892:  PUSH    83E
00894:  POP     186
....................       } 
00896:  GOTO    7EA
....................     } 
.................... }    
*
0089A:  PWRSAV  #0

Configuration Fuses:
   Word  1L: 00CF   NOWRTB NOBSS NORBS
          H: 0000  
   Word  2L: 00CF   NOWRTSS NOSSS NORSS
          H: 0000  
   Word  3L: 0007   NOWRT NOPROTECT
          H: 0000  
   Word  4L: 0080   FRC IESO
          H: 0000  
   Word  5L: 0042   HS OSCIO CKSNOFSM
          H: 0000  
   Word  6L: 005F   WPOSTS16 WPRES128 WINDIS NOWDT
          H: 0000  
   Word  7L: 00E7   PUT128
          H: 0000  
   Word  8L: 00C3   ICSP1 NOJTAG NODEBUG
          H: 0000  
